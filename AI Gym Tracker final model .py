{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "49d97e4a-44e1-4ead-9288-30d61302864d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install streamlit mediapipe opencv-python pyttsx3 numpy\n",
    "import cv2\n",
    "import mediapipe as mp\n",
    "import numpy as np\n",
    "import pyttsx3\n",
    "import tkinter as tk\n",
    "from threading import Thread\n",
    "import streamlit as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1bfcec49-bc84-4b2b-9e28-27f364d1bec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Text-to-speech\n",
    "engine = pyttsx3.init()\n",
    "def speak(text):\n",
    "    engine.say(text)\n",
    "    engine.runAndWait()\n",
    "\n",
    "def calculate_angle(a, b, c):\n",
    "    a, b, c = np.array(a), np.array(b), np.array(c)\n",
    "    radians = np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])\n",
    "    angle = np.abs(radians*180.0/np.pi)\n",
    "    if angle > 180.0:\n",
    "        angle = 360 - angle\n",
    "    return angle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "b1cd237e-97d4-4fd8-8121-ee5b433a98e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mediapipe setup\n",
    "mp_drawing = mp.solutions.drawing_utils\n",
    "mp_pose = mp.solutions.pose\n",
    "\n",
    "# Webcam\n",
    "cap = cv2.VideoCapture(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "bdff68a1-9ddf-4120-b380-74d48ac3effd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Counters, Stages, Targets\n",
    "counters = {'bicep_right': 0, 'squat': 0, 'pushup': 0}\n",
    "stages = {key: None for key in counters}\n",
    "targets = {'bicep_right': 5, 'squat': 5, 'pushup': 5}\n",
    "\n",
    "start_tracking = False\n",
    "\n",
    "with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:\n",
    "    while cap.isOpened():\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "        results = pose.process(image)\n",
    "        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n",
    "\n",
    "        if results.pose_landmarks:\n",
    "            landmarks = results.pose_landmarks.landmark\n",
    "\n",
    "            def get_point(landmark):\n",
    "                return [landmarks[landmark.value].x, landmarks[landmark.value].y]\n",
    "\n",
    "            if start_tracking:\n",
    "                # Bicep Curl Right\n",
    "                shoulder = get_point(mp_pose.PoseLandmark.RIGHT_SHOULDER)\n",
    "                elbow = get_point(mp_pose.PoseLandmark.RIGHT_ELBOW)\n",
    "                wrist = get_point(mp_pose.PoseLandmark.RIGHT_WRIST)\n",
    "                angle = calculate_angle(shoulder, elbow, wrist)\n",
    "\n",
    "                if angle > 160:\n",
    "                    stages['bicep_right'] = 'down'\n",
    "                if angle < 40 and stages['bicep_right'] == 'down':\n",
    "                    stages['bicep_right'] = 'up'\n",
    "                    counters['bicep_right'] += 1\n",
    "                    speak(f\"Bicep curl rep {counters['bicep_right']}\")\n",
    "                if 100 < angle < 140:\n",
    "                    speak(\"Keep your back straight!\")\n",
    "\n",
    "                # Squat\n",
    "                hip = get_point(mp_pose.PoseLandmark.RIGHT_HIP)\n",
    "                knee = get_point(mp_pose.PoseLandmark.RIGHT_KNEE)\n",
    "                ankle = get_point(mp_pose.PoseLandmark.RIGHT_ANKLE)\n",
    "                squat_angle = calculate_angle(hip, knee, ankle)\n",
    "\n",
    "                if squat_angle > 160:\n",
    "                    stages['squat'] = 'up'\n",
    "                if squat_angle < 90 and stages['squat'] == 'up':\n",
    "                    stages['squat'] = 'down'\n",
    "                    counters['squat'] += 1\n",
    "                    speak(f\"Squat rep {counters['squat']}\")\n",
    "                if 100 < squat_angle < 130:\n",
    "                    speak(\"Lower down more!\")\n",
    "\n",
    "                # Push-up\n",
    "                shoulder = get_point(mp_pose.PoseLandmark.RIGHT_SHOULDER)\n",
    "                elbow = get_point(mp_pose.PoseLandmark.RIGHT_ELBOW)\n",
    "                wrist = get_point(mp_pose.PoseLandmark.RIGHT_WRIST)\n",
    "                pushup_angle = calculate_angle(shoulder, elbow, wrist)\n",
    "\n",
    "                if pushup_angle > 160:\n",
    "                    stages['pushup'] = 'up'\n",
    "                if pushup_angle < 90 and stages['pushup'] == 'up':\n",
    "                    stages['pushup'] = 'down'\n",
    "                    counters['pushup'] += 1\n",
    "                    speak(f\"Push-up rep {counters['pushup']}\")\n",
    "                if 110 < pushup_angle < 150:\n",
    "                    speak(\"Go lower!\")\n",
    "\n",
    "            mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)\n",
    "\n",
    "        # Display counters\n",
    "        y = 80\n",
    "        for key, count in counters.items():\n",
    "            cv2.putText(image, f'{key}: {count}/{targets[key]}', (10, y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)\n",
    "            y += 30\n",
    "\n",
    "        if not start_tracking:\n",
    "            cv2.putText(image, 'Press S to start workout', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)\n",
    "\n",
    "        cv2.imshow('AI Gym Tracker', image)\n",
    "\n",
    "        key = cv2.waitKey(10) & 0xFF\n",
    "        if key == ord('q'):\n",
    "            break\n",
    "        elif key == ord('s'):\n",
    "            start_tracking = True\n",
    "            speak(\"Workout started\")\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "speak(\"Workout complete\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "fc5f2c60-6adf-447e-9622-37646ddae429",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final summary popup\n",
    "summary_image = np.zeros((300, 500, 3), dtype=np.uint8)\n",
    "cv2.putText(summary_image, 'Workout Summary:', (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)\n",
    "\n",
    "y_pos = 80\n",
    "for key, count in counters.items():\n",
    "    cv2.putText(summary_image, f\"{key.replace('_', ' ').capitalize()}: {count} reps\", (20, y_pos),\n",
    "                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)\n",
    "    y_pos += 40\n",
    "\n",
    "cv2.imshow('Session Summary', summary_image)\n",
    "speak(\"Workout complete. Great job!\")\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "30888ab8-8e73-4833-85e0-fe9367464b72",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'tracker_model'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[90], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcv2\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtracker_model\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m GymTracker\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m      6\u001b[0m st\u001b[38;5;241m.\u001b[39mset_page_config(page_title\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAI Gym Tracker\u001b[39m\u001b[38;5;124m\"\u001b[39m, layout\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwide\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tracker_model'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import cv2\n",
    "from tracker_model import GymTracker\n",
    "import numpy as np\n",
    "\n",
    "st.set_page_config(page_title=\"AI Gym Tracker\", layout=\"wide\")\n",
    "\n",
    "st.title(\"🏋️ AI Gym Tracker Dashboard\")\n",
    "start = st.button(\"Start Workout\")\n",
    "\n",
    "frame_window = st.image([])\n",
    "tracker = GymTracker()\n",
    "\n",
    "if start:\n",
    "    tracker.start_tracking = True\n",
    "    cap = cv2.VideoCapture(0)\n",
    "\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        frame = tracker.process_frame(frame)\n",
    "\n",
    "        # Display counter overlays\n",
    "        y = 50\n",
    "        for key, count in tracker.counters.items():\n",
    "            cv2.putText(frame, f\"{key}: {count}/{tracker.targets[key]}\", (10, y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)\n",
    "            y += 30\n",
    "\n",
    "        frame_window.image(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n",
    "\n",
    "        if sum([tracker.counters[k] >= tracker.targets[k] for k in tracker.targets]) == 3:\n",
    "            st.success(\"Workout Complete 🎉\")\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "\n",
    "    # Summary display\n",
    "    st.header(\"🏆 Session Summary\")\n",
    "    for key, count in tracker.counters.items():\n",
    "        st.write(f\"**{key.replace('_',' ').capitalize()}**: {count} reps\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "439d04e5-707e-4a10-b1e9-b483573dd452",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
